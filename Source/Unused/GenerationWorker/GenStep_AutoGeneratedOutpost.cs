using System;
using System.Collections.Generic;
using RimWorld;
using RimWorld.BaseGen;
using Verse;

namespace GenerationWorker
{
	// Token: 0x02000020 RID: 32
	public class GenStep_AutoGeneratedOutpost : GenStep
	{
		// Token: 0x17000008 RID: 8
		// (get) Token: 0x06000063 RID: 99 RVA: 0x0000426E File Offset: 0x0000246E
		public override int SeedPart
		{
			get
			{
				return 398638181;
			}
		}

		// Token: 0x06000064 RID: 100 RVA: 0x00004278 File Offset: 0x00002478
		public override void Generate(Map map, GenStepParams parms)
		{
			CellRect rectToDefend;
			if (!MapGenerator.TryGetVar<CellRect>("RectOfInterest", out rectToDefend))
			{
				rectToDefend = CellRect.SingleCell(map.Center);
			}
			Faction faction;
			if (map.ParentFaction == null || map.ParentFaction == Faction.OfPlayer)
			{
				faction = Find.FactionManager.RandomEnemyFaction(false, false, true, TechLevel.Industrial);
			}
			else
			{
				faction = map.ParentFaction;
			}
			ResolveParams resolveParams = default(ResolveParams);
			resolveParams.rect = this.GetOutpostRect(rectToDefend, map);
			resolveParams.faction = faction;
			resolveParams.edgeDefenseWidth = new int?(0);
			resolveParams.edgeDefenseTurretsCount = new int?(Rand.RangeInclusive(0, 0));
			resolveParams.edgeDefenseMortarsCount = new int?(0);
			if (parms.siteCoreOrPart != null)
			{
				resolveParams.settlementPawnGroupPoints = new float?(parms.siteCoreOrPart.parms.threatPoints);
				resolveParams.settlementPawnGroupSeed = new int?(OutpostSitePartUtility.GetPawnGroupMakerSeed(parms.siteCoreOrPart.parms));
			}
			else
			{
				resolveParams.settlementPawnGroupPoints = new float?(this.defaultPawnGroupPointsRange.RandomInRange);
			}
			BaseGen.globalSettings.map = map;
			BaseGen.globalSettings.minBuildings = 28;
			BaseGen.globalSettings.minBarracks = 4;
			BaseGen.symbolStack.Push("advancedGeneration", resolveParams);
			BaseGen.Generate();
		}

		// Token: 0x06000065 RID: 101 RVA: 0x000043A8 File Offset: 0x000025A8
		private CellRect GetOutpostRect(CellRect rectToDefend, Map map)
		{
			GenStep_AutoGeneratedOutpost.possibleRects.Add(new CellRect(rectToDefend.minX - 1 - this.size, rectToDefend.CenterCell.z - this.size / 2, this.size, this.size));
			GenStep_AutoGeneratedOutpost.possibleRects.Add(new CellRect(rectToDefend.maxX + 1, rectToDefend.CenterCell.z - this.size / 2, this.size, this.size));
			GenStep_AutoGeneratedOutpost.possibleRects.Add(new CellRect(rectToDefend.CenterCell.x - this.size / 2, rectToDefend.minZ - 1 - this.size, this.size, this.size));
			GenStep_AutoGeneratedOutpost.possibleRects.Add(new CellRect(rectToDefend.CenterCell.x - this.size / 2, rectToDefend.maxZ + 1, this.size, this.size));
			CellRect mapRect = new CellRect(0, 0, map.Size.x, map.Size.z);
			GenStep_AutoGeneratedOutpost.possibleRects.RemoveAll((CellRect x) => !x.FullyContainedWithin(mapRect));
			if (GenStep_AutoGeneratedOutpost.possibleRects.Any<CellRect>())
			{
				return GenStep_AutoGeneratedOutpost.possibleRects.RandomElement<CellRect>();
			}
			return rectToDefend;
		}

		// Token: 0x04000031 RID: 49
		public int size = 38;

		// Token: 0x04000032 RID: 50
		public FloatRange defaultPawnGroupPointsRange = SymbolResolver_AdvancedGeneration.DefaultPawnsPoints;

		// Token: 0x04000033 RID: 51
		private static List<CellRect> possibleRects = new List<CellRect>();
	}
}
